<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Add a new puchase details" xml:space="preserve">
    <value>Add a new puchase details</value>
  </data>
  <data name="Add a new sale details" xml:space="preserve">
    <value>Add a new sale details</value>
  </data>
  <data name="Add New" xml:space="preserve">
    <value>Add New</value>
  </data>
  <data name="Add New Bank" xml:space="preserve">
    <value>Add New Bank</value>
  </data>
  <data name="Add sale return" xml:space="preserve">
    <value>Add sale return</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Balanced Amount" xml:space="preserve">
    <value>Balanced Amount</value>
  </data>
  <data name="Bank" xml:space="preserve">
    <value>Bank</value>
  </data>
  <data name="Bank Payment" xml:space="preserve">
    <value>Bank Payment</value>
  </data>
  <data name="Calculate" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="Cash Payment" xml:space="preserve">
    <value>Cash Payment</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="Customer" xml:space="preserve">
    <value>Customer</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Details about Sale..." xml:space="preserve">
    <value>Details about Sale...</value>
  </data>
  <data name="Discount (%)" xml:space="preserve">
    <value>Discount (%)</value>
  </data>
  <data name="Discount Amount" xml:space="preserve">
    <value>Discount Amount</value>
  </data>
  <data name="Discount Type" xml:space="preserve">
    <value>Discount Type</value>
  </data>
  <data name="Discount(%)" xml:space="preserve">
    <value>Discount(%)</value>
  </data>
  <data name="Due Amount" xml:space="preserve">
    <value>Due Amount</value>
  </data>
  <data name="Enter return notes..." xml:space="preserve">
    <value>Enter return notes...</value>
  </data>
  <data name="Exchange Amount" xml:space="preserve">
    <value>Exchange Amount</value>
  </data>
  <data name="Exchange Rate" xml:space="preserve">
    <value>Exchange Rate</value>
  </data>
  <data name="Fixed Amount" xml:space="preserve">
    <value>Fixed Amount</value>
  </data>
  <data name="Full Paid" xml:space="preserve">
    <value>Full Paid</value>
  </data>
  <data name="Grand Total" xml:space="preserve">
    <value>Grand Total</value>
  </data>
  <data name="Invoice No" xml:space="preserve">
    <value>Invoice No</value>
  </data>
  <data name="Item details" xml:space="preserve">
    <value>Item details</value>
  </data>
  <data name="Paid Amount" xml:space="preserve">
    <value>Paid Amount</value>
  </data>
  <data name="Payment Type" xml:space="preserve">
    <value>Payment Type</value>
  </data>
  <data name="Per item" xml:space="preserve">
    <value>Per item</value>
  </data>
  <data name="Percentage(%)" xml:space="preserve">
    <value>Percentage(%)</value>
  </data>
  <data name="Product" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="Product List" xml:space="preserve">
    <value>Product List</value>
  </data>
  <data name="Purchase Date" xml:space="preserve">
    <value>Purchase Date</value>
  </data>
  <data name="Purchases" xml:space="preserve">
    <value>Purchases</value>
  </data>
  <data name="Purchases Administration" xml:space="preserve">
    <value>Purchases Administration</value>
  </data>
  <data name="Purchases List" xml:space="preserve">
    <value>Purchases List</value>
  </data>
  <data name="Qty" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="Received Amount" xml:space="preserve">
    <value>Received Amount</value>
  </data>
  <data name="Rent" xml:space="preserve">
    <value>Rent</value>
  </data>
  <data name="Return Check" xml:space="preserve">
    <value>Return Check</value>
  </data>
  <data name="Return Date" xml:space="preserve">
    <value>Return Date</value>
  </data>
  <data name="Return Notes" xml:space="preserve">
    <value>Return Notes</value>
  </data>
  <data name="Returned Qty" xml:space="preserve">
    <value>Returned Qty</value>
  </data>
  <data name="Returns" xml:space="preserve">
    <value>Returns</value>
  </data>
  <data name="Sale Date" xml:space="preserve">
    <value>Sale Date</value>
  </data>
  <data name="Sale Returns Administration" xml:space="preserve">
    <value>Sale Returns Administration</value>
  </data>
  <data name="Sale Returns List" xml:space="preserve">
    <value>Sale Returns List</value>
  </data>
  <data name="Sale Type" xml:space="preserve">
    <value>Sale Type</value>
  </data>
  <data name="Sales" xml:space="preserve">
    <value>Sales</value>
  </data>
  <data name="Sales Administration" xml:space="preserve">
    <value>Sales Administration</value>
  </data>
  <data name="Sales List" xml:space="preserve">
    <value>Sales List</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Save &amp; Print" xml:space="preserve">
    <value>Save &amp; Print</value>
  </data>
  <data name="Saved" xml:space="preserve">
    <value />
  </data>
  <data name="Select Bank" xml:space="preserve">
    <value>Select Bank</value>
  </data>
  <data name="Select Customer" xml:space="preserve">
    <value>Select Customer</value>
  </data>
  <data name="Select Supplier" xml:space="preserve">
    <value>Select Supplier</value>
  </data>
  <data name="Sold Qty" xml:space="preserve">
    <value>Sold Qty</value>
  </data>
  <data name="Sub Total" xml:space="preserve">
    <value>Sub Total</value>
  </data>
  <data name="Supplier" xml:space="preserve">
    <value>Supplier</value>
  </data>
  <data name="Supplier List" xml:space="preserve">
    <value>Supplier List</value>
  </data>
  <data name="Tax" xml:space="preserve">
    <value>Tax</value>
  </data>
  <data name="Total Discount (%)" xml:space="preserve">
    <value>Total Discount (%)</value>
  </data>
  <data name="Total Price" xml:space="preserve">
    <value>Total Price</value>
  </data>
  <data name="Unit" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="Unit Price" xml:space="preserve">
    <value>Unit Price</value>
  </data>
  <data name="WALKING CUSTOMER" xml:space="preserve">
    <value>WALKING CUSTOMER</value>
  </data>
</root>